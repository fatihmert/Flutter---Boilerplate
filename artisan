// Only CLI params

import 'dart:io';
import 'dart:async';

class Utils{
  static Future<List<String>> readFileAsLineByline({String filePath}) async {
    String fileAsString = await File(filePath).readAsString();
    return fileAsString.split("\n");
  }

  static Future<File> writeFile({String filePath, String content}) {
    return File(filePath).writeAsString(content);
  }

  static String pascalCase(String term){
    return '${term.substring(0, 1).toUpperCase()}${term.substring(1).toLowerCase()}';
  }

  static String weed(String str){
    return "\x1B[32m$str\x1B[0m";
  }

  static String blood(String str){
    return "\x1B[31m$str\x1B[0m";
  }

  static String yellow(String str){
    return "\x1B[33m$str\x1B[0m";
  }

  static String orange(String str){
    return "\x1B[34m$str\x1B[0m";
  }
}

class Path{
  String templates = ".\\templates\\";

  String ui = ".\\lib\\ui\\";
  String views = ".\\lib\\ui\\views\\";
  String widgets = ".\\lib\\ui\\widgets\\";

  String models = ".\\lib\\models\\";

  String helpers = ".\\lib\\helpers\\";
  String helper = ".\\lib\\app\\helper.dart";


  Path._privateConstructor();

  static final Path _instance = Path._privateConstructor();

  static Path get instance {
    if (Platform.isMacOS || Platform.isLinux) {
      _instance.templates = "templates/";

      _instance.ui = "lib/ui/";
      _instance.views = "lib/ui/views/";
      _instance.widgets = "lib/ui/widgets/";

      _instance.models = "lib/models/";

      _instance.helpers = "lib/helpers/";
      _instance.helper = "lib/app/helper.dart";
    }
    return _instance;
  }
}

// store artisan.env
Map<String, String> artisan;

void main(List<String> arguments) async{
//  print(arguments.toString());

  // init empty artisan.env object
  artisan = Map();

  // Storage to build variable from build.env file
  List<String> lines = new File('artisan.env').readAsLinesSync();
  for (var line in lines) {
    if (line.isNotEmpty && line[0] != "#"){ //skip comment line and empty line
      var splitted = line.split("=");
      artisan[splitted[0]] = splitted[1];
    }
  }

//  print("ARTISAN:: ${artisan.toString()}");

  if(arguments.length >= 2){
    // Only View and Widget

    if(arguments[0].toLowerCase() == "view"){ // Create view
      var name = arguments[1];
      var folderName = name.toLowerCase();
      var classNamePrefix = Utils.pascalCase(name);

      var viewName = classNamePrefix + artisan["VIEW_APPENDIX"];
      var viewModelName = classNamePrefix + artisan["VIEWMODEL_APPENDIX"];

      var viewFileName = folderName + "_" + artisan["VIEW_APPENDIX"].toLowerCase();
      var viewModelFileName = folderName + "_" + artisan["VIEWMODEL_APPENDIX"].toLowerCase();

//      print("name:: $name | FolderName:: $folderName | classNamePrefix:: $classNamePrefix \nViewName: $viewName | ViewModelName: $viewModelName");
//      print("ViewFileName:: $viewFileName | ViewModelFileName:: $viewModelFileName");

      bool exists = await Directory(Path.instance.views + folderName).exists();

      if (exists){
//        print(Utils.weed(str))
        throw(Utils.orange("Already ${Path.instance.views + folderName} directory exists!"));
      }else{
        var _viewFile = new File(Path.instance.templates + artisan["VIEW_TEMPLATE"]).readAsStringSync();
        var _viewModelFile = new File(Path.instance.templates + artisan["VIEWMODEL_TEMPLATE"]).readAsStringSync();

        _viewFile = _viewFile.replaceAll("{VIEW_NAME}", viewName).replaceAll("{VIEW_MODEL_NAME}", viewModelName).replaceAll("{VIEW_MODEL_FILE_NAME}", viewModelFileName);
        _viewModelFile = _viewModelFile.replaceAll("{VIEW_NAME}", viewName).replaceAll("{VIEW_MODEL_NAME}", viewModelName);

//        print("NEW_VIEW_FILE:: ${_viewFile.toString()}");
//        print("NEW_VIEW_MODEL_FILE:: ${_viewModelFile.toString()}");

        var reactiveStatus = false;
        try {
          var reactive = arguments[2].toLowerCase();
//          print("REACTIVE_STATUS:: $reactive");
          if (reactive == "--reactive") {
            reactiveStatus = true;
          }
        } on RangeError{
          reactiveStatus = false;
        }

        _viewFile = _viewFile.replaceAll("{REACTIVE_STATUS}", reactiveStatus.toString());

        new Directory(Path.instance.views + folderName).create().then((Directory newDir) async{
          var transPathForPlatform = newDir.path + "\\";
          if (Platform.isMacOS || Platform.isLinux) {
            transPathForPlatform = newDir.path + "/";
          }

          await Utils.writeFile(
            filePath: transPathForPlatform + viewFileName + ".dart",
            content: _viewFile
          );

          await Utils.writeFile(
            filePath: transPathForPlatform + viewModelFileName + ".dart",
            content: _viewModelFile
          );

          print(Utils.weed("CREATED ${viewName.toString()} View !"));
        });
      }
    } else if (arguments[0].toLowerCase() == "widget"){
      var name = arguments[1];
      var widgetNamePrefix = Utils.pascalCase(name);

      var widgetName = widgetNamePrefix + artisan["WIDGET_APPENDIX"];
      var widgetFileName = name + "_" + artisan["WIDGET_APPENDIX"].toLowerCase();

      bool exists = await Directory(Path.instance.widgets + widgetFileName).exists();
      if (exists){
        throw(Utils.orange("Already ${Path.instance.widgets + widgetFileName} widget exists!"));
      }else{

        var statefullStatus = false;
        try {
          var statefull = arguments[2].toLowerCase();
//          print("REACTIVE_STATUS:: $reactive");
          if (statefull == "--statefull") {
            statefullStatus = true;
          }
        } on RangeError{
          statefullStatus = false;
        }

        var _widgetFile = new File(Path.instance.templates + artisan["WIDGET_TEMPLATE"]).readAsStringSync();
        if(statefullStatus == true){
          _widgetFile = new File(Path.instance.templates + artisan["WIDGET_STATEFULL_TEMPLATE"]).readAsStringSync();
        }


        _widgetFile = _widgetFile.replaceAll("{WIDGET_NAME}", widgetName);

//        print("WidgetName:: $widgetName | WidgetFileName:: $widgetFileName");
//        print("WIDGET:: ${_widgetFile.toString()}");


        await Utils.writeFile(
            filePath: Path.instance.widgets + widgetFileName + ".dart",
            content: _widgetFile
        );

        print(Utils.weed("CREATED ${widgetName.toString()} Widget !"));
      }

    } else if (arguments[0].toLowerCase() == "helper"){
      var name = arguments[1];
      var className = Utils.pascalCase(name);
      var newHelperFileName = className.toLowerCase();

      bool exists = await File(Path.instance.helpers + newHelperFileName + ".dart").exists();
      if (exists){
        throw(Utils.orange("Already ${Path.instance.helpers + newHelperFileName + ".dart"} helper exists!"));
      }else{
        var _helperFile = new File(Path.instance.templates + artisan["HELPER_TEMPLATE"]).readAsStringSync();
        _helperFile = _helperFile.replaceAll("{HELPER_NAME}", className);

        await Utils.writeFile(
            filePath: Path.instance.helpers + newHelperFileName + ".dart",
            content: _helperFile
        );

        List contentLineByLine = await Utils.readFileAsLineByline(
          filePath: Path.instance.helper,
        );

        int j = 0;
        for (int i = 0; i < contentLineByLine.length; i++) {
          if (contentLineByLine[i].contains("//cmt::IMPORT_NEW_HELPER")) {
            contentLineByLine[i] = "import '../helpers/$newHelperFileName.dart';\n\r${artisan["IMPORT_NEW_HELPER"]}";
            j++;
          }
          if (contentLineByLine[i].contains("//cmt::ADD_NEW_HELPER")) {
            contentLineByLine[i] = "  static $className get $newHelperFileName => $className.instance;\n\r${artisan["ADD_NEW_HELPER"]}";
            j++;
          }
          if (j == 2){
            break;
          }
        }

        await Utils.writeFile(
          filePath: Path.instance.helper,
          content: contentLineByLine.join('\n'),
        );
      }

    }
  }else if(arguments.length >= 3 && arguments[0].toLowerCase() == "model"){
    // FROM FILE:   model model.json ModelName [--private]

    // TODO: follow command;
    // FROM URL:    model http://../a.json ModelName

    var JSON_NAME = arguments[1];
    var MODEL_NAME = arguments[2];

    bool isPrivate = false, isURL = false;

    try{
      if(arguments[3].toLowerCase() == "--private"){
        isPrivate = true;
      }
    } on RangeError{
      isPrivate = false;
    }

    var urlPattern = r"(https?|http)://([-A-Z0-9.]+)(/[-A-Z0-9+&@#/%=~_|!:,.;]*)?(\?[A-Z0-9+&@#/%=~_|!:‌​,.;]*)?";
    var match = new RegExp(urlPattern, caseSensitive: false).firstMatch(JSON_NAME);

    isURL = match != null;

    var findModelFileName = MODEL_NAME.toLowerCase() + '.dart';

//    print("ARTISAN.MODEL -> JSON{url: ${isURL.toString()}}: $JSON_NAME | MODEL: $MODEL_NAME | private: ${isPrivate.toString()}");
//    print("FIND_FILE_NAME:: ${findModelFileName}");

    // dart .\json2dart.dart model sample.json Test false false .\lib\models\
    // dartaotruntime .\json2dart.aot model sample.json Test3 false false .\lib\models\

    var subprocess = 'dartaotruntime json2dart.aot model $JSON_NAME $MODEL_NAME ${isPrivate.toString()} false ${Path._instance.models}';
//    print("SUBPROCESS:: $subprocess");

    Process.run(subprocess, [], runInShell: true).then((result) {
      stdout.write(result.stdout);
      stderr.write(result.stderr);
    });

    print(Utils.weed("Model created!"));

  }


}